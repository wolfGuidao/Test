!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
A	2020-2/_2-3.cpp	/^    A()$/;"	f	class:A
A	2020-2/_2-3.cpp	/^class A$/;"	c	file:
ASN1_STRING_get0_data	httplib.h	/^inline const unsigned char *ASN1_STRING_get0_data(const ASN1_STRING *asn1) {$/;"	f
Add	2020-2/_2-4.cpp	/^string Add(const string& str1,const string& str2)$/;"	f
B	2020-2/_2-3.cpp	/^class B$/;"	c	file:
BufferStream	httplib.h	/^class BufferStream : public Stream {$/;"	c	namespace:httplib::detail
Build	2020-3/_3-2.cpp	/^TreeNode* Build(vector<int>::iterator prebegin,vector<int>::iterator preend,vector<int>::iterator inobegin,vector<int>::iterator inoend)$/;"	f
C	2020-2/_2-3.cpp	/^class C : public B$/;"	c	file:
CC	2020-2/Makefile	/^CC=g++$/;"	m
CC	2020-3/Makefile	/^CC=g++$/;"	m
CC	2020-4/Makefile	/^CC=g++$/;"	m
CC	Makefile	/^CC=g++$/;"	m
CGarbo	2020-4/4-1.cpp	/^    class CGarbo$/;"	c	class:Singleton	file:
CPPHTTPLIB_HTTPLIB_H	httplib.h	9;"	d
CPPHTTPLIB_KEEPALIVE_MAX_COUNT	httplib.h	24;"	d
CPPHTTPLIB_KEEPALIVE_TIMEOUT_SECOND	httplib.h	16;"	d
CPPHTTPLIB_KEEPALIVE_TIMEOUT_USECOND	httplib.h	20;"	d
CPPHTTPLIB_PAYLOAD_MAX_LENGTH	httplib.h	44;"	d
CPPHTTPLIB_READ_TIMEOUT_SECOND	httplib.h	28;"	d
CPPHTTPLIB_READ_TIMEOUT_USECOND	httplib.h	32;"	d
CPPHTTPLIB_RECV_BUFSIZ	httplib.h	48;"	d
CPPHTTPLIB_REDIRECT_MAX_COUNT	httplib.h	40;"	d
CPPHTTPLIB_REQUEST_URI_MAX_LENGTH	httplib.h	36;"	d
CPPHTTPLIB_THREAD_POOL_COUNT	httplib.h	52;"	d
Client	httplib.h	/^class Client {$/;"	c	namespace:httplib
Client	httplib.h	/^inline Client::Client(const std::string &host, int port,$/;"	f	class:httplib::Client
ContentReader	httplib.h	/^  ContentReader(Reader reader, MultipartReader muitlpart_reader)$/;"	f	class:httplib::ContentReader
ContentReader	httplib.h	/^class ContentReader {$/;"	c	namespace:httplib
Convert	2020-3/_3-13.cpp	/^    TreeNode* Convert(TreeNode* pRootOfTree)$/;"	f	class:Solution
Count	2020-3/_3-17.cpp	/^int Count(std::string& str)$/;"	f
DES	2020-2/Makefile	/^DES=test$/;"	m
DES	2020-3/Makefile	/^DES=test$/;"	m
DES	2020-4/Makefile	/^DES=test$/;"	m
DES	Makefile	/^DES=test$/;"	m
DataSink	httplib.h	/^class DataSink {$/;"	c	namespace:httplib
Delete	httplib.h	/^inline Server &Server::Delete(const char *pattern, Handler handler) {$/;"	f	class:httplib::Server
Delete	httplib.h	/^inline std::shared_ptr<Response> Client::Delete(const char *path) {$/;"	f	class:httplib::Client
Delete	httplib.h	/^inline std::shared_ptr<Response> Client::Delete(const char *path,$/;"	f	class:httplib::Client
FLAG	2020-2/Makefile	/^FLAG=-std=c++11 $/;"	m
FLAG	2020-3/Makefile	/^FLAG=-std=c++11 $/;"	m
FLAG	2020-4/Makefile	/^FLAG=-std=c++11 $/;"	m
FLAG	Makefile	/^FLAG=-std=c++11 -lpthread$/;"	m
FindSubStr	2020-3/_3-10.cpp	/^vector<vector<int>> FindSubStr(vector<int> num)$/;"	f
Get	httplib.h	/^Client::Get(const char *path, const Headers &headers, Progress progress) {$/;"	f	class:httplib::Client
Get	httplib.h	/^inline Server &Server::Get(const char *pattern, Handler handler) {$/;"	f	class:httplib::Server
Get	httplib.h	/^inline std::shared_ptr<Response> Client::Get(const char *path) {$/;"	f	class:httplib::Client
Get	httplib.h	/^inline std::shared_ptr<Response> Client::Get(const char *path,$/;"	f	class:httplib::Client
Get	httplib.h	/^inline void Get(std::vector<Request> &requests, const char *path) {$/;"	f	namespace:httplib
Get	httplib.h	/^inline void Get(std::vector<Request> &requests, const char *path,$/;"	f	namespace:httplib
GetA	2020-3/_3-4.cpp	/^int GetA(int N)$/;"	f
GetInstance	2020-4/4-1.cpp	/^    static Singleton* GetInstance()$/;"	f	class:Singleton
GetLength	2020-3/_3-21.cpp	/^int GetLength(vector<int>& arr)$/;"	f
GetLength	2020-3/_3-5.cpp	/^int GetLength(TreeNode* root)$/;"	f
GetMoney	2020-3/_3-9.cpp	/^int GetMoney(vector<int>& arr,int start,int end)$/;"	f
GetNextBig	2020-3/_3-25.cpp	/^vector<int> GetNextBig(vector<int>& arr)$/;"	f
GetSum	2020-3/_3-15.cpp	/^    int GetSum (int i)$/;"	f	class:Solution
Head	httplib.h	/^inline std::shared_ptr<Response> Client::Head(const char *path) {$/;"	f	class:httplib::Client
Head	httplib.h	/^inline std::shared_ptr<Response> Client::Head(const char *path,$/;"	f	class:httplib::Client
IsTrue	2020-3/_3-7.cpp	/^bool IsTrue(vector<int>& arr,int val)$/;"	f
ListNode	2020-3/_3-26.cpp	/^  ListNode(int x) $/;"	f	class:ListNode
ListNode	2020-3/_3-26.cpp	/^class ListNode $/;"	c	file:
MD5	httplib.h	/^inline std::string MD5(const std::string &s) {$/;"	f	namespace:httplib::detail
MergeSort	2020-3/_3-11.cpp	/^void MergeSort(int* arr,int n)$/;"	f
MergeSortChild	2020-3/_3-11.cpp	/^void MergeSortChild(int* arr,int begin,int end,int* temp)$/;"	f
MultipartFormData	httplib.h	/^struct MultipartFormData {$/;"	s	namespace:httplib
MultipartFormDataParser	httplib.h	/^class MultipartFormDataParser {$/;"	c	namespace:httplib::detail
NOMINMAX	httplib.h	90;"	d
Options	httplib.h	/^inline Server &Server::Options(const char *pattern, Handler handler) {$/;"	f	class:httplib::Server
Options	httplib.h	/^inline std::shared_ptr<Response> Client::Options(const char *path) {$/;"	f	class:httplib::Client
Options	httplib.h	/^inline std::shared_ptr<Response> Client::Options(const char *path,$/;"	f	class:httplib::Client
Patch	httplib.h	/^Client::Patch(const char *path, const Headers &headers, size_t content_length,$/;"	f	class:httplib::Client
Patch	httplib.h	/^inline Server &Server::Patch(const char *pattern, Handler handler) {$/;"	f	class:httplib::Server
Patch	httplib.h	/^inline Server &Server::Patch(const char *pattern,$/;"	f	class:httplib::Server
Patch	httplib.h	/^inline std::shared_ptr<Response> Client::Patch(const char *path,$/;"	f	class:httplib::Client
Post	httplib.h	/^Client::Post(const char *path, const Headers &headers, const Params &params) {$/;"	f	class:httplib::Client
Post	httplib.h	/^Client::Post(const char *path, const Headers &headers, size_t content_length,$/;"	f	class:httplib::Client
Post	httplib.h	/^Client::Post(const char *path, const Headers &headers,$/;"	f	class:httplib::Client
Post	httplib.h	/^Client::Post(const char *path, const MultipartFormDataItems &items) {$/;"	f	class:httplib::Client
Post	httplib.h	/^inline Server &Server::Post(const char *pattern, Handler handler) {$/;"	f	class:httplib::Server
Post	httplib.h	/^inline Server &Server::Post(const char *pattern,$/;"	f	class:httplib::Server
Post	httplib.h	/^inline std::shared_ptr<Response> Client::Post(const char *path,$/;"	f	class:httplib::Client
Post	httplib.h	/^inline void Post(std::vector<Request> &requests, const char *path,$/;"	f	namespace:httplib
Print	2020-3/_3-2.cpp	/^void Print(TreeNode*& root)$/;"	f
PrintMinNumber	2020-3/_3-12.cpp	/^    string PrintMinNumber(vector<int> numbers) {$/;"	f	class:Solution
Put	httplib.h	/^Client::Put(const char *path, const Headers &headers, const Params &params) {$/;"	f	class:httplib::Client
Put	httplib.h	/^Client::Put(const char *path, const Headers &headers, size_t content_length,$/;"	f	class:httplib::Client
Put	httplib.h	/^inline Server &Server::Put(const char *pattern, Handler handler) {$/;"	f	class:httplib::Server
Put	httplib.h	/^inline Server &Server::Put(const char *pattern,$/;"	f	class:httplib::Server
Put	httplib.h	/^inline std::shared_ptr<Response> Client::Put(const char *path,$/;"	f	class:httplib::Client
QuickChild	2020-3/_3-11.cpp	/^int QuickChild(int* arr,int begin,int end)$/;"	f
QuickSort	2020-3/_3-11.cpp	/^void QuickSort(int* arr,int left,int right)$/;"	f
Request	httplib.h	/^struct Request {$/;"	s	namespace:httplib
Response	httplib.h	/^struct Response {$/;"	s	namespace:httplib
Reverse	2020-3/_3-26.cpp	/^ListNode* Reverse(ListNode* root)$/;"	f
ReverseN	2020-3/_3-26.cpp	/^ListNode* ReverseN(ListNode* root,int N)$/;"	f
S01	2020-4/4-4.cpp	/^string S01(int n)$/;"	f
SHA_256	httplib.h	/^inline std::string SHA_256(const std::string &s) {$/;"	f	namespace:httplib::detail
SHA_512	httplib.h	/^inline std::string SHA_512(const std::string &s) {$/;"	f	namespace:httplib::detail
SO_OPENTYPE	httplib.h	1373;"	d
SO_SYNCHRONOUS_NONALERT	httplib.h	1372;"	d
SRC	2020-2/Makefile	/^SRC=_2-4.cpp$/;"	m
SRC	2020-3/Makefile	/^SRC=_3-25.cpp$/;"	m
SRC	2020-4/Makefile	/^SRC=4-4.cpp$/;"	m
SRC	Makefile	/^SRC=test.cpp$/;"	m
SSLClient	httplib.h	/^class SSLClient : public Client {$/;"	c	namespace:httplib
SSLClient	httplib.h	/^inline SSLClient::SSLClient(const std::string &host, int port,$/;"	f	class:httplib::SSLClient
SSLInit	httplib.h	/^  SSLInit() {$/;"	f	class:httplib::detail::SSLInit
SSLInit	httplib.h	/^class SSLInit {$/;"	c	namespace:httplib::detail
SSLServer	httplib.h	/^class SSLServer : public Server {$/;"	c	namespace:httplib
SSLServer	httplib.h	/^inline SSLServer::SSLServer(const char *cert_path, const char *private_key_path,$/;"	f	class:httplib::SSLServer
SSLSocketStream	httplib.h	/^class SSLSocketStream : public Stream {$/;"	c	namespace:httplib::detail
SSLSocketStream	httplib.h	/^inline SSLSocketStream::SSLSocketStream(socket_t sock, SSL *ssl,$/;"	f	class:httplib::detail::SSLSocketStream
SSLThreadLocks	httplib.h	/^  SSLThreadLocks() {$/;"	f	class:httplib::detail::SSLThreadLocks
SSLThreadLocks	httplib.h	/^class SSLThreadLocks {$/;"	c	namespace:httplib::detail
S_ISDIR	httplib.h	86;"	d
S_ISREG	httplib.h	82;"	d
Server	httplib.h	/^class Server {$/;"	c	namespace:httplib
Server	httplib.h	/^inline Server::Server()$/;"	f	class:httplib::Server
Singleton	2020-4/4-1.cpp	/^    Singleton()$/;"	f	class:Singleton	file:
Singleton	2020-4/4-1.cpp	/^class Singleton$/;"	c	file:
SocketStream	httplib.h	/^class SocketStream : public Stream {$/;"	c	namespace:httplib::detail
SocketStream	httplib.h	/^inline SocketStream::SocketStream(socket_t sock, time_t read_timeout_sec,$/;"	f	class:httplib::detail::SocketStream
Solution	2020-2/_2-28.cpp	/^class Solution {$/;"	c	file:
Solution	2020-2/_2-29.cpp	/^class Solution {$/;"	c	file:
Solution	2020-3/_3-12.cpp	/^class Solution {$/;"	c	file:
Solution	2020-3/_3-13.cpp	/^class Solution {$/;"	c	file:
Solution	2020-3/_3-14.cpp	/^class Solution {$/;"	c	file:
Solution	2020-3/_3-15.cpp	/^class Solution {$/;"	c	file:
Solution	2020-3/_3-18.cpp	/^class Solution {$/;"	c	file:
Solution	2020-3/_3-23.cpp	/^class Solution {$/;"	c	file:
Solution	2020-3/_3-3.cpp	/^class Solution {$/;"	c	file:
Solution	2020-3/_3-6.cpp	/^class Solution {$/;"	c	file:
Solution	2020-4/4-3.cpp	/^class Solution $/;"	c	file:
Stream	httplib.h	/^class Stream {$/;"	c	namespace:httplib
SubStrSet	2020-3/_3-10.cpp	/^void SubStrSet(vector<int> arr,int start,vector<int> track)$/;"	f
Sum	2020-2/_2-3.cpp	/^  virtual long long Sum(int n)$/;"	f	class:B
Sum	2020-2/_2-3.cpp	/^  virtual long long Sum(int n)$/;"	f	class:C
Sum	2020-2/_2-3.cpp	/^long long Sum()$/;"	f
Sum	2020-2/_2-3.cpp	/^long long Sum<1>()$/;"	f
Sum1	2020-2/_2-3.cpp	/^void Sum1(int n)$/;"	f
Sum2	2020-2/_2-3.cpp	/^void Sum2()$/;"	f
Sum3	2020-2/_2-3.cpp	/^void Sum3(int n)$/;"	f
Sum4	2020-2/_2-3.cpp	/^void Sum4(int n)$/;"	f
SwitchRoot	install.sh	/^function SwitchRoot() {$/;"	f
TaskQueue	httplib.h	/^class TaskQueue {$/;"	c	namespace:httplib
TestSplit	2020-4/4-2.cpp	/^void TestSplit()$/;"	f
ThreadPool	httplib.h	/^  explicit ThreadPool(size_t n) : shutdown_(false) {$/;"	f	class:httplib::ThreadPool
ThreadPool	httplib.h	/^class ThreadPool : public TaskQueue {$/;"	c	namespace:httplib
Tranlate	2020-3/_3-13.cpp	/^    void Tranlate(TreeNode* pRoot,TreeNode*& Head)$/;"	f	class:Solution
TreeNode	2020-3/_3-2.cpp	/^  TreeNode(int x) : val(x), left(NULL), right(NULL) {}$/;"	f	struct:TreeNode
TreeNode	2020-3/_3-2.cpp	/^struct TreeNode {$/;"	s	file:
TreeNode	2020-3/_3-5.cpp	/^  TreeNode(int x) : val(x), left(NULL), right(NULL)$/;"	f	struct:TreeNode
TreeNode	2020-3/_3-5.cpp	/^struct TreeNode {$/;"	s	file:
WSA_FLAG_NO_HANDLE_INHERIT	httplib.h	98;"	d
WSInit	httplib.h	/^  WSInit() {$/;"	f	class:httplib::detail::WSInit
WSInit	httplib.h	/^class WSInit {$/;"	c	namespace:httplib::detail
_CRT_NONSTDC_NO_DEPRECATE	httplib.h	66;"	d
_CRT_SECURE_NO_WARNINGS	httplib.h	62;"	d
_mutex	2020-4/4-1.cpp	/^    static pthread_mutex_t _mutex;$/;"	m	class:Singleton	file:
_mutex	2020-4/4-1.cpp	/^pthread_mutex_t Singleton::_mutex;$/;"	m	class:Singleton	file:
append	httplib.h	/^  void append(char c) {$/;"	f	class:httplib::detail::stream_line_reader
arr	2020-2/_2-3.cpp	/^B* arr[2];$/;"	v
backtrack	2020-3/_3-7.cpp	/^void backtrack(vector<int>& arr,vector<int>& track)$/;"	f
backtrack	2020-3/_3-8.cpp	/^void backtrack(int n,size_t k,int start,vector<int>& track)$/;"	f
base64_encode	httplib.h	/^inline std::string base64_encode(const std::string &in) {$/;"	f	namespace:httplib::detail
base_dirs_	httplib.h	/^  std::vector<std::pair<std::string, std::string>> base_dirs_;$/;"	m	class:httplib::Server
basic_auth_password_	httplib.h	/^  std::string basic_auth_password_;$/;"	m	class:httplib::Client
basic_auth_username_	httplib.h	/^  std::string basic_auth_username_;$/;"	m	class:httplib::Client
binaryLeft	2020-3/_3-20.cpp	/^int binaryLeft(vector<int>& arr,int target)$/;"	f
binaryRight	2020-3/_3-20.cpp	/^int binaryRight(vector<int>& arr,int target)$/;"	f
bind_internal	httplib.h	/^inline int Server::bind_internal(const char *host, int port, int socket_flags) {$/;"	f	class:httplib::Server
bind_ip_address	httplib.h	/^inline bool bind_ip_address(socket_t sock, const char *host) {$/;"	f	namespace:httplib::detail
bind_to_any_port	httplib.h	/^inline int Server::bind_to_any_port(const char *host, int socket_flags) {$/;"	f	class:httplib::Server
bind_to_port	httplib.h	/^inline bool Server::bind_to_port(const char *host, int port, int socket_flags) {$/;"	f	class:httplib::Server
body	httplib.h	/^  std::string body;$/;"	m	struct:httplib::Request
body	httplib.h	/^  std::string body;$/;"	m	struct:httplib::Response
boundary_	httplib.h	/^  std::string boundary_;$/;"	m	class:httplib::detail::MultipartFormDataParser
buf_	httplib.h	/^  std::string buf_;$/;"	m	class:httplib::detail::MultipartFormDataParser
buffer	httplib.h	/^  std::string buffer;$/;"	m	class:httplib::detail::BufferStream
ca_cert_dir_path_	httplib.h	/^  std::string ca_cert_dir_path_;$/;"	m	class:httplib::SSLClient
ca_cert_file_path_	httplib.h	/^  std::string ca_cert_file_path_;$/;"	m	class:httplib::SSLClient
can_compress	httplib.h	/^inline bool can_compress(const std::string &content_type) {$/;"	f	namespace:httplib::detail
cgarbo	2020-4/4-1.cpp	/^    static CGarbo cgarbo;$/;"	m	class:Singleton	file:
cgarbo	2020-4/4-1.cpp	/^Singleton::CGarbo cgarbo;$/;"	v
check_host_name	httplib.h	/^inline bool SSLClient::check_host_name(const char *pattern,$/;"	f	class:httplib::SSLClient
ci	httplib.h	/^struct ci {$/;"	s	namespace:httplib::detail
clear_file_info	httplib.h	/^  void clear_file_info() {$/;"	f	class:httplib::detail::MultipartFormDataParser
client_cert_path_	httplib.h	/^  std::string client_cert_path_;$/;"	m	class:httplib::Client
client_key_path_	httplib.h	/^  std::string client_key_path_;$/;"	m	class:httplib::Client
close_socket	httplib.h	/^inline int close_socket(socket_t sock) {$/;"	f	namespace:httplib::detail
cols	2020-3/_3-18.cpp	/^size_t cols;$/;"	v
compress	httplib.h	/^inline bool compress(std::string &content) {$/;"	f	namespace:httplib::detail
compress_	httplib.h	/^  bool compress_ = false;$/;"	m	class:httplib::Client
cond_	httplib.h	/^  std::condition_variable cond_;$/;"	m	class:httplib::ThreadPool
connect	httplib.h	/^inline bool Client::connect(socket_t sock, Response &res, bool &error) {$/;"	f	class:httplib::Client
content	httplib.h	/^  std::string content;$/;"	m	struct:httplib::MultipartFormData
content_length	httplib.h	/^  size_t content_length = 0;$/;"	m	struct:httplib::Response
content_length	httplib.h	/^  size_t content_length;$/;"	m	struct:httplib::Request
content_provider	httplib.h	/^  ContentProvider content_provider;$/;"	m	struct:httplib::Request
content_provider	httplib.h	/^  ContentProvider content_provider;$/;"	m	struct:httplib::Response
content_provider_resource_releaser	httplib.h	/^  std::function<void()> content_provider_resource_releaser;$/;"	m	struct:httplib::Response
content_receiver	httplib.h	/^  ContentReceiver content_receiver;$/;"	m	struct:httplib::Request
content_type	httplib.h	/^  std::string content_type;$/;"	m	struct:httplib::MultipartFormData
copy_settings	httplib.h	/^  void copy_settings(const Client &rhs) {$/;"	f	class:httplib::Client
count	2020-2/_2-3.cpp	/^    static long long count;$/;"	m	class:A	file:
count	2020-2/_2-3.cpp	/^long long A::count = 0;$/;"	m	class:A	file:
create_client_socket	httplib.h	/^inline socket_t Client::create_client_socket() const {$/;"	f	class:httplib::Client
create_client_socket	httplib.h	/^inline socket_t create_client_socket(const char *host, int port,$/;"	f	namespace:httplib::detail
create_server_socket	httplib.h	/^inline socket_t Server::create_server_socket(const char *host, int port,$/;"	f	class:httplib::Server
create_socket	httplib.h	/^socket_t create_socket(const char *host, int port, Fn fn,$/;"	f	namespace:httplib::detail
ctx_	httplib.h	/^  SSL_CTX *ctx_;$/;"	m	class:httplib::SSLClient
ctx_	httplib.h	/^  SSL_CTX *ctx_;$/;"	m	class:httplib::SSLServer
ctx_mutex_	httplib.h	/^  std::mutex ctx_mutex_;$/;"	m	class:httplib::SSLClient
ctx_mutex_	httplib.h	/^  std::mutex ctx_mutex_;$/;"	m	class:httplib::SSLServer
decode_url	httplib.h	/^inline std::string decode_url(const std::string &s,$/;"	f	namespace:httplib::detail
decompress	httplib.h	/^  bool decompress(const char *data, size_t data_length, T callback) {$/;"	f	class:httplib::detail::decompressor
decompressor	httplib.h	/^  decompressor() {$/;"	f	class:httplib::detail::decompressor
decompressor	httplib.h	/^class decompressor {$/;"	c	namespace:httplib::detail
delete_handlers_	httplib.h	/^  Handlers delete_handlers_;$/;"	m	class:httplib::Server
detail	httplib.h	/^namespace detail {$/;"	n	namespace:httplib
dfs	2020-3/_3-18.cpp	/^    int dfs(vector<vector<int> >& matrix, int r, int c, int R, int C)$/;"	f	class:Solution
dfs	2020-3/_3-18.cpp	/^int dfs(vector<vector<int>>& arr,size_t x,size_t y)$/;"	f
digest_auth_password_	httplib.h	/^  std::string digest_auth_password_;$/;"	m	class:httplib::Client
digest_auth_username_	httplib.h	/^  std::string digest_auth_username_;$/;"	m	class:httplib::Client
dirs	2020-3/_3-18.cpp	/^    int dirs[4][2] = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};$/;"	m	class:Solution	file:
dispatch_request	httplib.h	/^inline bool Server::dispatch_request(Request &req, Response &res,$/;"	f	class:httplib::Server
dispatch_request_for_content_reader	httplib.h	/^inline bool Server::dispatch_request_for_content_reader($/;"	f	class:httplib::Server
done	httplib.h	/^  std::function<void()> done;$/;"	m	class:httplib::DataSink
dp	2020-2/_2-29.cpp	/^    int dp(string word1,string word2,int i,int j)$/;"	f	class:Solution
dp	2020-3/_3-19.cpp	/^int dp(vector<int>& coins,int amount)$/;"	f
dp	2020-3/_3-22.cpp	/^int dp(string& str1,string& str2,int i,int j)$/;"	f
dp	2020-3/_3-23.cpp	/^    int dp(int k,int n,vector<vector<int>>& ret)$/;"	f	class:Solution
dp	2020-3/_3-23.cpp	/^int dp(int K,int N)$/;"	f
dp	2020-3/_3-24.cpp	/^int dp(const string& str1,const string& str2,int i,int j)$/;"	f
dp	2020-3/_3-3.cpp	/^    vector<int> dp(TreeNode* root) {$/;"	f	class:Solution
duplicate	2020-3/_3-14.cpp	/^    bool duplicate(int numbers[], int length, int* duplication) {$/;"	f	class:Solution
enable_server_certificate_verification	httplib.h	/^inline void SSLClient::enable_server_certificate_verification(bool enabled) {$/;"	f	class:httplib::SSLClient
encode_url	httplib.h	/^inline std::string encode_url(const std::string &s) {$/;"	f	namespace:httplib::detail
end_with_crlf	httplib.h	/^  bool end_with_crlf() const {$/;"	f	class:httplib::detail::stream_line_reader
error_handler_	httplib.h	/^  Handler error_handler_;$/;"	m	class:httplib::Server
expect_100_continue_handler_	httplib.h	/^  Expect100ContinueHandler expect_100_continue_handler_;$/;"	m	class:httplib::Server
expect_content	httplib.h	/^inline bool expect_content(const Request &req) {$/;"	f	namespace:httplib::detail
falg	2020-3/_3-18.cpp	/^vector<vector<int>> falg;$/;"	v
file_	httplib.h	/^  MultipartFormData file_;$/;"	m	class:httplib::detail::MultipartFormDataParser
file_extension	httplib.h	/^inline std::string file_extension(const std::string &path) {$/;"	f	namespace:httplib::detail
file_extension_and_mimetype_map_	httplib.h	/^  std::map<std::string, std::string> file_extension_and_mimetype_map_;$/;"	m	class:httplib::Server
file_request_handler_	httplib.h	/^  Handler file_request_handler_;$/;"	m	class:httplib::Server
filename	httplib.h	/^  std::string filename;$/;"	m	struct:httplib::MultipartFormData
files	httplib.h	/^  MultipartFormDataMap files;$/;"	m	struct:httplib::Request
find_content_type	httplib.h	/^find_content_type(const std::string &path,$/;"	f	namespace:httplib::detail
fixed_buffer_	httplib.h	/^  char *fixed_buffer_;$/;"	m	class:httplib::detail::stream_line_reader
fixed_buffer_size_	httplib.h	/^  const size_t fixed_buffer_size_;$/;"	m	class:httplib::detail::stream_line_reader
fixed_buffer_used_size_	httplib.h	/^  size_t fixed_buffer_used_size_ = 0;$/;"	m	class:httplib::detail::stream_line_reader
follow_location_	httplib.h	/^  bool follow_location_ = false;$/;"	m	class:httplib::Client
from_hex_to_i	httplib.h	/^inline bool from_hex_to_i(const std::string &s, size_t i, size_t cnt,$/;"	f	namespace:httplib::detail
from_i_to_hex	httplib.h	/^inline std::string from_i_to_hex(size_t n) {$/;"	f	namespace:httplib::detail
get_buffer	httplib.h	/^inline const std::string &BufferStream::get_buffer() const { return buffer; }$/;"	f	class:httplib::detail::BufferStream
get_file_value	httplib.h	/^inline MultipartFormData Request::get_file_value(const char *key) const {$/;"	f	class:httplib::Request
get_handlers_	httplib.h	/^  Handlers get_handlers_;$/;"	m	class:httplib::Server
get_header_value	httplib.h	/^inline const char *get_header_value(const Headers &headers, const char *key,$/;"	f	namespace:httplib::detail
get_header_value	httplib.h	/^inline std::string Request::get_header_value(const char *key, size_t id) const {$/;"	f	class:httplib::Request
get_header_value	httplib.h	/^inline std::string Response::get_header_value(const char *key,$/;"	f	class:httplib::Response
get_header_value_count	httplib.h	/^inline size_t Request::get_header_value_count(const char *key) const {$/;"	f	class:httplib::Request
get_header_value_count	httplib.h	/^inline size_t Response::get_header_value_count(const char *key) const {$/;"	f	class:httplib::Response
get_header_value_uint64	httplib.h	/^inline uint64_t get_header_value_uint64(const Headers &headers, const char *key,$/;"	f	namespace:httplib::detail
get_multipart_ranges_data_length	httplib.h	/^get_multipart_ranges_data_length(const Request &req, Response &res,$/;"	f	namespace:httplib::detail
get_openssl_verify_result	httplib.h	/^inline long SSLClient::get_openssl_verify_result() const {$/;"	f	class:httplib::SSLClient
get_param_value	httplib.h	/^inline std::string Request::get_param_value(const char *key, size_t id) const {$/;"	f	class:httplib::Request
get_param_value_count	httplib.h	/^inline size_t Request::get_param_value_count(const char *key) const {$/;"	f	class:httplib::Request
get_range_offset_and_length	httplib.h	/^get_range_offset_and_length(const Request &req, const Response &res,$/;"	f	namespace:httplib::detail
get_range_offset_and_length	httplib.h	/^get_range_offset_and_length(const Request &req, size_t content_length,$/;"	f	namespace:httplib::detail
get_remote_addr	httplib.h	/^inline std::string BufferStream::get_remote_addr() const { return ""; }$/;"	f	class:httplib::detail::BufferStream
get_remote_addr	httplib.h	/^inline std::string SSLSocketStream::get_remote_addr() const {$/;"	f	class:httplib::detail::SSLSocketStream
get_remote_addr	httplib.h	/^inline std::string SocketStream::get_remote_addr() const {$/;"	f	class:httplib::detail::SocketStream
get_remote_addr	httplib.h	/^inline std::string get_remote_addr(socket_t sock) {$/;"	f	namespace:httplib::detail
getline	httplib.h	/^  bool getline() {$/;"	f	class:httplib::detail::stream_line_reader
glowable_buffer_	httplib.h	/^  std::string glowable_buffer_;$/;"	m	class:httplib::detail::stream_line_reader
handle_file_request	httplib.h	/^inline bool Server::handle_file_request(Request &req, Response &res,$/;"	f	class:httplib::Server
handle_request	httplib.h	/^inline bool Client::handle_request(Stream &strm, const Request &req,$/;"	f	class:httplib::Client
has_file	httplib.h	/^inline bool Request::has_file(const char *key) const {$/;"	f	class:httplib::Request
has_header	httplib.h	/^inline bool Request::has_header(const char *key) const {$/;"	f	class:httplib::Request
has_header	httplib.h	/^inline bool Response::has_header(const char *key) const {$/;"	f	class:httplib::Response
has_header	httplib.h	/^inline bool has_header(const Headers &headers, const char *key) {$/;"	f	namespace:httplib::detail
has_param	httplib.h	/^inline bool Request::has_param(const char *key) const {$/;"	f	class:httplib::Request
headers	httplib.h	/^  Headers headers;$/;"	m	struct:httplib::Request
headers	httplib.h	/^  Headers headers;$/;"	m	struct:httplib::Response
host_	httplib.h	/^  const std::string host_;$/;"	m	class:httplib::Client
host_and_port_	httplib.h	/^  const std::string host_and_port_;$/;"	m	class:httplib::Client
host_components_	httplib.h	/^  std::vector<std::string> host_components_;$/;"	m	class:httplib::SSLClient
httplib	httplib.h	/^namespace httplib {$/;"	n
if2ip	httplib.h	/^inline std::string if2ip(const std::string &ifn) {$/;"	f	namespace:httplib::detail
instance	2020-4/4-1.cpp	/^    static Singleton* instance;$/;"	m	class:Singleton	file:
instance	2020-4/4-1.cpp	/^Singleton* Singleton::instance = nullptr;$/;"	m	class:Singleton	file:
interface_	httplib.h	/^  std::string interface_;$/;"	m	class:httplib::Client
intervalIntersection	2020-3/_3-6.cpp	/^    vector<vector<int>> intervalIntersection(vector<vector<int>>& A, vector<vector<int>>& B) {$/;"	f	class:Solution
is_chunked_transfer_encoding	httplib.h	/^inline bool is_chunked_transfer_encoding(const Headers &headers) {$/;"	f	namespace:httplib::detail
is_connection_error	httplib.h	/^inline bool is_connection_error() {$/;"	f	namespace:httplib::detail
is_dir	httplib.h	/^inline bool is_dir(const std::string &path) {$/;"	f	namespace:httplib::detail
is_done_	httplib.h	/^  size_t is_done_ = false;$/;"	m	class:httplib::detail::MultipartFormDataParser
is_file	httplib.h	/^inline bool is_file(const std::string &path) {$/;"	f	namespace:httplib::detail
is_hex	httplib.h	/^inline bool is_hex(char c, int &v) {$/;"	f	namespace:httplib::detail
is_multipart_form_data	httplib.h	/^inline bool Request::is_multipart_form_data() const {$/;"	f	class:httplib::Request
is_readable	httplib.h	/^inline bool BufferStream::is_readable() const { return true; }$/;"	f	class:httplib::detail::BufferStream
is_readable	httplib.h	/^inline bool SSLSocketStream::is_readable() const {$/;"	f	class:httplib::detail::SSLSocketStream
is_readable	httplib.h	/^inline bool SocketStream::is_readable() const {$/;"	f	class:httplib::detail::SocketStream
is_running	httplib.h	/^inline bool Server::is_running() const { return is_running_; }$/;"	f	class:httplib::Server
is_running_	httplib.h	/^  std::atomic<bool> is_running_;$/;"	m	class:httplib::Server
is_ssl	httplib.h	/^inline bool Client::is_ssl() const { return false; }$/;"	f	class:httplib::Client
is_ssl	httplib.h	/^inline bool SSLClient::is_ssl() const { return true; }$/;"	f	class:httplib::SSLClient
is_valid	httplib.h	/^  bool is_valid() const { return is_valid_; }$/;"	f	class:httplib::detail::MultipartFormDataParser
is_valid	httplib.h	/^  bool is_valid() const { return is_valid_; }$/;"	f	class:httplib::detail::decompressor
is_valid	httplib.h	/^inline bool Client::is_valid() const { return true; }$/;"	f	class:httplib::Client
is_valid	httplib.h	/^inline bool SSLClient::is_valid() const { return ctx_; }$/;"	f	class:httplib::SSLClient
is_valid	httplib.h	/^inline bool SSLServer::is_valid() const { return ctx_; }$/;"	f	class:httplib::SSLServer
is_valid	httplib.h	/^inline bool Server::is_valid() const { return true; }$/;"	f	class:httplib::Server
is_valid_	httplib.h	/^  bool is_valid_;$/;"	m	class:httplib::detail::decompressor
is_valid_	httplib.h	/^  size_t is_valid_ = false;$/;"	m	class:httplib::detail::MultipartFormDataParser
is_valid_path	httplib.h	/^inline bool is_valid_path(const std::string &path) {$/;"	f	namespace:httplib::detail
is_writable	httplib.h	/^  std::function<bool()> is_writable;$/;"	m	class:httplib::DataSink
is_writable	httplib.h	/^inline bool BufferStream::is_writable() const { return true; }$/;"	f	class:httplib::detail::BufferStream
is_writable	httplib.h	/^inline bool SSLSocketStream::is_writable() const {$/;"	f	class:httplib::detail::SSLSocketStream
is_writable	httplib.h	/^inline bool SocketStream::is_writable() const {$/;"	f	class:httplib::detail::SocketStream
jobs_	httplib.h	/^  std::list<std::function<void()>> jobs_;$/;"	m	class:httplib::ThreadPool
keep_alive_max_count_	httplib.h	/^  size_t keep_alive_max_count_ = CPPHTTPLIB_KEEPALIVE_MAX_COUNT;$/;"	m	class:httplib::Client
keep_alive_max_count_	httplib.h	/^  size_t keep_alive_max_count_;$/;"	m	class:httplib::Server
left	2020-3/_3-2.cpp	/^  TreeNode *left;$/;"	m	struct:TreeNode	file:
left	2020-3/_3-5.cpp	/^  TreeNode *left;$/;"	m	struct:TreeNode	file:
lengthOfLIS	2020-2/_2-28.cpp	/^    int lengthOfLIS(vector<int>& nums) {$/;"	f	class:Solution
listen	httplib.h	/^inline bool Server::listen(const char *host, int port, int socket_flags) {$/;"	f	class:httplib::Server
listen_after_bind	httplib.h	/^inline bool Server::listen_after_bind() { return listen_internal(); }$/;"	f	class:httplib::Server
listen_internal	httplib.h	/^inline bool Server::listen_internal() {$/;"	f	class:httplib::Server
locking_callback	httplib.h	/^  static void locking_callback(int mode, int type, const char * \/*file*\/,$/;"	f	class:httplib::detail::SSLThreadLocks
logger_	httplib.h	/^  Logger logger_;$/;"	m	class:httplib::Client
logger_	httplib.h	/^  Logger logger_;$/;"	m	class:httplib::Server
longestIncreasingPath	2020-3/_3-18.cpp	/^    int longestIncreasingPath(vector<vector<int>>& matrix) {$/;"	f	class:Solution
longestPalindromeSubseq	2020-3/_3-1.cpp	/^int longestPalindromeSubseq(string s) {$/;"	f
main	2020-2/_2-2.cpp	/^int main()$/;"	f
main	2020-2/_2-3.cpp	/^int main()$/;"	f
main	2020-2/_2-4.cpp	/^int main()$/;"	f
main	2020-3/_3-10.cpp	/^int main()$/;"	f
main	2020-3/_3-11.cpp	/^int main()$/;"	f
main	2020-3/_3-16.cpp	/^int main()$/;"	f
main	2020-3/_3-17.cpp	/^int main()$/;"	f
main	2020-3/_3-18.cpp	/^int main()$/;"	f
main	2020-3/_3-19.cpp	/^int main()$/;"	f
main	2020-3/_3-2.cpp	/^int main()$/;"	f
main	2020-3/_3-20.cpp	/^int main()$/;"	f
main	2020-3/_3-21.cpp	/^int main()$/;"	f
main	2020-3/_3-22.cpp	/^int main()$/;"	f
main	2020-3/_3-23.cpp	/^int main()$/;"	f
main	2020-3/_3-24.cpp	/^int main()$/;"	f
main	2020-3/_3-25.cpp	/^int main()$/;"	f
main	2020-3/_3-26.cpp	/^int main()$/;"	f
main	2020-3/_3-4.cpp	/^int main()$/;"	f
main	2020-3/_3-7.cpp	/^int main()$/;"	f
main	2020-3/_3-8.cpp	/^int main()$/;"	f
main	2020-3/_3-9.cpp	/^int main()$/;"	f
main	2020-4/4-1.cpp	/^int main() $/;"	f
main	2020-4/4-2.cpp	/^int main()$/;"	f
main	2020-4/4-4.cpp	/^int main()$/;"	f
main	test.cpp	/^int main()$/;"	f
make_basic_authentication_header	httplib.h	/^make_basic_authentication_header(const std::string &username,$/;"	f	namespace:httplib
make_content_range_header_field	httplib.h	/^inline std::string make_content_range_header_field(size_t offset, size_t length,$/;"	f	namespace:httplib::detail
make_digest_authentication_header	httplib.h	/^inline std::pair<std::string, std::string> make_digest_authentication_header($/;"	f	namespace:httplib
make_multipart_data_boundary	httplib.h	/^inline std::string make_multipart_data_boundary() {$/;"	f	namespace:httplib::detail
make_multipart_ranges_data	httplib.h	/^inline std::string make_multipart_ranges_data(const Request &req, Response &res,$/;"	f	namespace:httplib::detail
make_range_header	httplib.h	/^inline std::pair<std::string, std::string> make_range_header(Ranges ranges) {$/;"	f	namespace:httplib
matches	httplib.h	/^  Match matches;$/;"	m	struct:httplib::Request
memo	2020-3/_3-18.cpp	/^    vector<vector<int> > memo;$/;"	m	class:Solution	file:
message_digest	httplib.h	/^inline std::string message_digest(const std::string &s, Init init,$/;"	f	namespace:httplib::detail
method	httplib.h	/^  std::string method;$/;"	m	struct:httplib::Request
min	2020-3/_3-22.cpp	/^int min(int a,int b,int c)$/;"	f
minDestence	2020-3/_3-22.cpp	/^void minDestence(string str1,string str2)$/;"	f
minDistance	2020-2/_2-29.cpp	/^    int minDistance(string word1, string word2) {$/;"	f	class:Solution
move	2020-3/_3-15.cpp	/^    int move(int& threshold,int rows,int cols,int i,int j,vector<bool>& flag)$/;"	f	class:Solution
movingCount	2020-3/_3-15.cpp	/^    int movingCount(int threshold, int rows, int cols)$/;"	f	class:Solution
muitlpart_reader_	httplib.h	/^  MultipartReader muitlpart_reader_;$/;"	m	class:httplib::ContentReader
multiply	2020-2/_2-1.cpp	/^string multiply(string num1, string num2) {$/;"	f
mutex_	httplib.h	/^  std::mutex mutex_;$/;"	m	class:httplib::ThreadPool
name	httplib.h	/^  std::string name;$/;"	m	struct:httplib::MultipartFormData
new_task_queue	httplib.h	/^  std::function<TaskQueue *(void)> new_task_queue;$/;"	m	class:httplib::Server
next	2020-3/_3-26.cpp	/^  ListNode* next;$/;"	m	class:ListNode	file:
noexcept	httplib.h	/^  SSL_CTX *ssl_context() const noexcept;$/;"	m	class:httplib::SSLClient
off_	httplib.h	/^  size_t off_ = 0;$/;"	m	class:httplib::detail::MultipartFormDataParser
openSSL_locks_	httplib.h	/^static std::shared_ptr<std::vector<std::mutex>> openSSL_locks_;$/;"	m	namespace:httplib::detail
operator ()	httplib.h	/^    void operator()() {$/;"	f	struct:httplib::ThreadPool::worker
operator ()	httplib.h	/^  bool operator()(ContentReceiver receiver) const { return reader_(receiver); }$/;"	f	class:httplib::ContentReader
operator ()	httplib.h	/^  bool operator()(MultipartContentHeader header,$/;"	f	class:httplib::ContentReader
operator ()	httplib.h	/^  bool operator()(const std::string &s1, const std::string &s2) const {$/;"	f	struct:httplib::detail::ci
options_handlers_	httplib.h	/^  Handlers options_handlers_;$/;"	m	class:httplib::Server
override	httplib.h	/^          callback) override;$/;"	m	class:httplib::SSLClient
override	httplib.h	/^  bool is_readable() const override;$/;"	m	class:httplib::detail::BufferStream
override	httplib.h	/^  bool is_readable() const override;$/;"	m	class:httplib::detail::SSLSocketStream
override	httplib.h	/^  bool is_readable() const override;$/;"	m	class:httplib::detail::SocketStream
override	httplib.h	/^  bool is_ssl() const override;$/;"	m	class:httplib::SSLClient
override	httplib.h	/^  bool is_valid() const override;$/;"	m	class:httplib::SSLClient
override	httplib.h	/^  bool is_valid() const override;$/;"	m	class:httplib::SSLServer
override	httplib.h	/^  bool is_writable() const override;$/;"	m	class:httplib::detail::BufferStream
override	httplib.h	/^  bool is_writable() const override;$/;"	m	class:httplib::detail::SSLSocketStream
override	httplib.h	/^  bool is_writable() const override;$/;"	m	class:httplib::detail::SocketStream
override	httplib.h	/^  bool process_and_close_socket(socket_t sock) override;$/;"	m	class:httplib::SSLServer
override	httplib.h	/^  ssize_t read(char *ptr, size_t size) override;$/;"	m	class:httplib::detail::BufferStream
override	httplib.h	/^  ssize_t read(char *ptr, size_t size) override;$/;"	m	class:httplib::detail::SSLSocketStream
override	httplib.h	/^  ssize_t read(char *ptr, size_t size) override;$/;"	m	class:httplib::detail::SocketStream
override	httplib.h	/^  ssize_t write(const char *ptr, size_t size) override;$/;"	m	class:httplib::detail::BufferStream
override	httplib.h	/^  ssize_t write(const char *ptr, size_t size) override;$/;"	m	class:httplib::detail::SSLSocketStream
override	httplib.h	/^  ssize_t write(const char *ptr, size_t size) override;$/;"	m	class:httplib::detail::SocketStream
override	httplib.h	/^  std::string get_remote_addr() const override;$/;"	m	class:httplib::detail::BufferStream
override	httplib.h	/^  std::string get_remote_addr() const override;$/;"	m	class:httplib::detail::SSLSocketStream
override	httplib.h	/^  std::string get_remote_addr() const override;$/;"	m	class:httplib::detail::SocketStream
override	httplib.h	/^  ~BufferStream() override = default;$/;"	m	class:httplib::detail::BufferStream
override	httplib.h	/^  ~SSLClient() override;$/;"	m	class:httplib::SSLClient
override	httplib.h	/^  ~SSLServer() override;$/;"	m	class:httplib::SSLServer
override	httplib.h	/^  ~SSLSocketStream() override;$/;"	m	class:httplib::detail::SSLSocketStream
override	httplib.h	/^  ~SocketStream() override;$/;"	m	class:httplib::detail::SocketStream
override	httplib.h	/^  ~ThreadPool() override = default;$/;"	m	class:httplib::ThreadPool
params	httplib.h	/^  Params params;$/;"	m	struct:httplib::Request
params_to_query_str	httplib.h	/^inline std::string params_to_query_str(const Params &params) {$/;"	f	namespace:httplib::detail
parse	httplib.h	/^  bool parse(const char *buf, size_t n, T content_callback, U header_callback) {$/;"	f	class:httplib::detail::MultipartFormDataParser
parse_multipart_boundary	httplib.h	/^inline bool parse_multipart_boundary(const std::string &content_type,$/;"	f	namespace:httplib::detail
parse_query_text	httplib.h	/^inline void parse_query_text(const std::string &s, Params &params) {$/;"	f	namespace:httplib::detail
parse_range_header	httplib.h	/^inline bool parse_range_header(const std::string &s, Ranges &ranges) {$/;"	f	namespace:httplib::detail
parse_request_line	httplib.h	/^inline bool Server::parse_request_line(const char *s, Request &req) {$/;"	f	class:httplib::Server
parse_www_authenticate	httplib.h	/^inline bool parse_www_authenticate(const httplib::Response &res,$/;"	f	namespace:httplib
patch_handlers_	httplib.h	/^  Handlers patch_handlers_;$/;"	m	class:httplib::Server
patch_handlers_for_content_reader_	httplib.h	/^  HandlersForContentReader patch_handlers_for_content_reader_;$/;"	m	class:httplib::Server
path	httplib.h	/^  std::string path;$/;"	m	struct:httplib::Request
payload_max_length_	httplib.h	/^  size_t payload_max_length_;$/;"	m	class:httplib::Server
poll	httplib.h	111;"	d
pool_	httplib.h	/^    ThreadPool &pool_;$/;"	m	struct:httplib::ThreadPool::worker
port_	httplib.h	/^  const int port_;$/;"	m	class:httplib::Client
position	httplib.h	/^  size_t position = 0;$/;"	m	class:httplib::detail::BufferStream
post_handlers_	httplib.h	/^  Handlers post_handlers_;$/;"	m	class:httplib::Server
post_handlers_for_content_reader_	httplib.h	/^  HandlersForContentReader post_handlers_for_content_reader_;$/;"	m	class:httplib::Server
process_and_close_socket	httplib.h	/^inline bool Client::process_and_close_socket($/;"	f	class:httplib::Client
process_and_close_socket	httplib.h	/^inline bool SSLClient::process_and_close_socket($/;"	f	class:httplib::SSLClient
process_and_close_socket	httplib.h	/^inline bool SSLServer::process_and_close_socket(socket_t sock) {$/;"	f	class:httplib::SSLServer
process_and_close_socket	httplib.h	/^inline bool Server::process_and_close_socket(socket_t sock) {$/;"	f	class:httplib::Server
process_and_close_socket	httplib.h	/^inline bool process_and_close_socket(bool is_client_request, socket_t sock,$/;"	f	namespace:httplib::detail
process_and_close_socket_ssl	httplib.h	/^inline bool process_and_close_socket_ssl($/;"	f	namespace:httplib::detail
process_multipart_ranges_data	httplib.h	/^bool process_multipart_ranges_data(const Request &req, Response &res,$/;"	f	namespace:httplib::detail
process_request	httplib.h	/^Server::process_request(Stream &strm, bool last_connection,$/;"	f	class:httplib::Server
process_request	httplib.h	/^inline bool Client::process_request(Stream &strm, const Request &req,$/;"	f	class:httplib::Client
process_socket	httplib.h	/^inline bool process_socket(bool is_client_request, socket_t sock,$/;"	f	namespace:httplib::detail
progress	httplib.h	/^  Progress progress;$/;"	m	struct:httplib::Request
proxy_basic_auth_password_	httplib.h	/^  std::string proxy_basic_auth_password_;$/;"	m	class:httplib::Client
proxy_basic_auth_username_	httplib.h	/^  std::string proxy_basic_auth_username_;$/;"	m	class:httplib::Client
proxy_digest_auth_password_	httplib.h	/^  std::string proxy_digest_auth_password_;$/;"	m	class:httplib::Client
proxy_digest_auth_username_	httplib.h	/^  std::string proxy_digest_auth_username_;$/;"	m	class:httplib::Client
proxy_host_	httplib.h	/^  std::string proxy_host_;$/;"	m	class:httplib::Client
proxy_port_	httplib.h	/^  int proxy_port_;$/;"	m	class:httplib::Client
ptr	httplib.h	/^  const char *ptr() const {$/;"	f	class:httplib::detail::stream_line_reader
put_handlers_	httplib.h	/^  Handlers put_handlers_;$/;"	m	class:httplib::Server
put_handlers_for_content_reader_	httplib.h	/^  HandlersForContentReader put_handlers_for_content_reader_;$/;"	m	class:httplib::Server
random_string	httplib.h	/^inline std::string random_string(size_t length) {$/;"	f	namespace:httplib
ranges	httplib.h	/^  Ranges ranges;$/;"	m	struct:httplib::Request
read	httplib.h	/^inline ssize_t BufferStream::read(char *ptr, size_t size) {$/;"	f	class:httplib::detail::BufferStream
read	httplib.h	/^inline ssize_t SSLSocketStream::read(char *ptr, size_t size) {$/;"	f	class:httplib::detail::SSLSocketStream
read	httplib.h	/^inline ssize_t SocketStream::read(char *ptr, size_t size) {$/;"	f	class:httplib::detail::SocketStream
read_content	httplib.h	/^bool read_content(Stream &strm, T &x, size_t payload_max_length, int &status,$/;"	f	namespace:httplib::detail
read_content	httplib.h	/^inline bool Server::read_content(Stream &strm, bool last_connection,$/;"	f	class:httplib::Server
read_content_chunked	httplib.h	/^inline bool read_content_chunked(Stream &strm, ContentReceiver out) {$/;"	f	namespace:httplib::detail
read_content_core	httplib.h	/^inline bool Server::read_content_core(Stream &strm, bool last_connection,$/;"	f	class:httplib::Server
read_content_with_content_receiver	httplib.h	/^inline bool Server::read_content_with_content_receiver($/;"	f	class:httplib::Server
read_content_with_length	httplib.h	/^inline bool read_content_with_length(Stream &strm, uint64_t len,$/;"	f	namespace:httplib::detail
read_content_without_length	httplib.h	/^inline bool read_content_without_length(Stream &strm, ContentReceiver out) {$/;"	f	namespace:httplib::detail
read_file	httplib.h	/^inline void read_file(const std::string &path, std::string &out) {$/;"	f	namespace:httplib::detail
read_headers	httplib.h	/^inline bool read_headers(Stream &strm, Headers &headers) {$/;"	f	namespace:httplib::detail
read_response_line	httplib.h	/^inline bool Client::read_response_line(Stream &strm, Response &res) {$/;"	f	class:httplib::Client
read_timeout_sec_	httplib.h	/^  time_t read_timeout_sec_ = CPPHTTPLIB_READ_TIMEOUT_SECOND;$/;"	m	class:httplib::Client
read_timeout_sec_	httplib.h	/^  time_t read_timeout_sec_;$/;"	m	class:httplib::Server
read_timeout_sec_	httplib.h	/^  time_t read_timeout_sec_;$/;"	m	class:httplib::detail::SSLSocketStream
read_timeout_sec_	httplib.h	/^  time_t read_timeout_sec_;$/;"	m	class:httplib::detail::SocketStream
read_timeout_usec_	httplib.h	/^  time_t read_timeout_usec_ = CPPHTTPLIB_READ_TIMEOUT_USECOND;$/;"	m	class:httplib::Client
read_timeout_usec_	httplib.h	/^  time_t read_timeout_usec_;$/;"	m	class:httplib::Server
read_timeout_usec_	httplib.h	/^  time_t read_timeout_usec_;$/;"	m	class:httplib::detail::SSLSocketStream
read_timeout_usec_	httplib.h	/^  time_t read_timeout_usec_;$/;"	m	class:httplib::detail::SocketStream
reader_	httplib.h	/^  Reader reader_;$/;"	m	class:httplib::ContentReader
redirect	httplib.h	/^inline bool Client::redirect(const Request &req, Response &res) {$/;"	f	class:httplib::Client
redirect	httplib.h	/^inline bool redirect(T &cli, const Request &req, Response &res,$/;"	f	namespace:httplib::detail
redirect_count	httplib.h	/^  size_t redirect_count = CPPHTTPLIB_REDIRECT_MAX_COUNT;$/;"	m	struct:httplib::Request
remove_mount_point	httplib.h	/^inline bool Server::remove_mount_point(const char *mount_point) {$/;"	f	class:httplib::Server
res	2020-3/_3-10.cpp	/^vector<vector<int>> res;$/;"	v
response_handler	httplib.h	/^  ResponseHandler response_handler;$/;"	m	struct:httplib::Request
ret	2020-3/_3-7.cpp	/^vector<vector<int>> ret;$/;"	v
right	2020-3/_3-2.cpp	/^  TreeNode *right;$/;"	m	struct:TreeNode	file:
right	2020-3/_3-5.cpp	/^  TreeNode *right;$/;"	m	struct:TreeNode	file:
rob	2020-3/_3-3.cpp	/^    int rob(TreeNode* root) {$/;"	f	class:Solution
routing	httplib.h	/^inline bool Server::routing(Request &req, Response &res, Stream &strm,$/;"	f	class:httplib::Server
rows	2020-3/_3-18.cpp	/^size_t rows;$/;"	v
select_read	httplib.h	/^inline int select_read(socket_t sock, time_t sec, time_t usec) {$/;"	f	namespace:httplib::detail
select_write	httplib.h	/^inline int select_write(socket_t sock, time_t sec, time_t usec) {$/;"	f	namespace:httplib::detail
send	httplib.h	/^inline bool Client::send(const Request &req, Response &res) {$/;"	f	class:httplib::Client
send	httplib.h	/^inline bool Client::send(const std::vector<Request> &requests,$/;"	f	class:httplib::Client
send_with_content_provider	httplib.h	/^inline std::shared_ptr<Response> Client::send_with_content_provider($/;"	f	class:httplib::Client
server_certificate_verification_	httplib.h	/^  bool server_certificate_verification_ = false;$/;"	m	class:httplib::SSLClient
set_base_dir	httplib.h	/^inline bool Server::set_base_dir(const char *dir, const char *mount_point) {$/;"	f	class:httplib::Server
set_basic_auth	httplib.h	/^inline void Client::set_basic_auth(const char *username, const char *password) {$/;"	f	class:httplib::Client
set_boundary	httplib.h	/^  void set_boundary(std::string boundary) { boundary_ = std::move(boundary); }$/;"	f	class:httplib::detail::MultipartFormDataParser
set_ca_cert_path	httplib.h	/^inline void SSLClient::set_ca_cert_path(const char *ca_cert_file_path,$/;"	f	class:httplib::SSLClient
set_chunked_content_provider	httplib.h	/^inline void Response::set_chunked_content_provider($/;"	f	class:httplib::Response
set_compress	httplib.h	/^inline void Client::set_compress(bool on) { compress_ = on; }$/;"	f	class:httplib::Client
set_content	httplib.h	/^inline void Response::set_content(const char *s, size_t n,$/;"	f	class:httplib::Response
set_content	httplib.h	/^inline void Response::set_content(std::string s,$/;"	f	class:httplib::Response
set_content_provider	httplib.h	/^inline void Response::set_content_provider($/;"	f	class:httplib::Response
set_digest_auth	httplib.h	/^inline void Client::set_digest_auth(const char *username,$/;"	f	class:httplib::Client
set_error_handler	httplib.h	/^inline void Server::set_error_handler(Handler handler) {$/;"	f	class:httplib::Server
set_expect_100_continue_handler	httplib.h	/^Server::set_expect_100_continue_handler(Expect100ContinueHandler handler) {$/;"	f	class:httplib::Server
set_file_extension_and_mimetype_mapping	httplib.h	/^inline void Server::set_file_extension_and_mimetype_mapping(const char *ext,$/;"	f	class:httplib::Server
set_file_request_handler	httplib.h	/^inline void Server::set_file_request_handler(Handler handler) {$/;"	f	class:httplib::Server
set_follow_location	httplib.h	/^inline void Client::set_follow_location(bool on) { follow_location_ = on; }$/;"	f	class:httplib::Client
set_header	httplib.h	/^inline void Request::set_header(const char *key, const char *val) {$/;"	f	class:httplib::Request
set_header	httplib.h	/^inline void Request::set_header(const char *key, const std::string &val) {$/;"	f	class:httplib::Request
set_header	httplib.h	/^inline void Response::set_header(const char *key, const char *val) {$/;"	f	class:httplib::Response
set_header	httplib.h	/^inline void Response::set_header(const char *key, const std::string &val) {$/;"	f	class:httplib::Response
set_interface	httplib.h	/^inline void Client::set_interface(const char *intf) { interface_ = intf; }$/;"	f	class:httplib::Client
set_keep_alive_max_count	httplib.h	/^inline void Client::set_keep_alive_max_count(size_t count) {$/;"	f	class:httplib::Client
set_keep_alive_max_count	httplib.h	/^inline void Server::set_keep_alive_max_count(size_t count) {$/;"	f	class:httplib::Server
set_logger	httplib.h	/^inline void Client::set_logger(Logger logger) { logger_ = std::move(logger); }$/;"	f	class:httplib::Client
set_logger	httplib.h	/^inline void Server::set_logger(Logger logger) { logger_ = std::move(logger); }$/;"	f	class:httplib::Server
set_mount_point	httplib.h	/^inline bool Server::set_mount_point(const char *mount_point, const char *dir) {$/;"	f	class:httplib::Server
set_nonblocking	httplib.h	/^inline void set_nonblocking(socket_t sock, bool nonblocking) {$/;"	f	namespace:httplib::detail
set_payload_max_length	httplib.h	/^inline void Server::set_payload_max_length(size_t length) {$/;"	f	class:httplib::Server
set_proxy	httplib.h	/^inline void Client::set_proxy(const char *host, int port) {$/;"	f	class:httplib::Client
set_proxy_basic_auth	httplib.h	/^inline void Client::set_proxy_basic_auth(const char *username,$/;"	f	class:httplib::Client
set_proxy_digest_auth	httplib.h	/^inline void Client::set_proxy_digest_auth(const char *username,$/;"	f	class:httplib::Client
set_read_timeout	httplib.h	/^inline void Client::set_read_timeout(time_t sec, time_t usec) {$/;"	f	class:httplib::Client
set_read_timeout	httplib.h	/^inline void Server::set_read_timeout(time_t sec, time_t usec) {$/;"	f	class:httplib::Server
set_redirect	httplib.h	/^inline void Response::set_redirect(const char *url) {$/;"	f	class:httplib::Response
set_timeout_sec	httplib.h	/^inline void Client::set_timeout_sec(time_t timeout_sec) {$/;"	f	class:httplib::Client
shutdown_	httplib.h	/^  bool shutdown_;$/;"	m	class:httplib::ThreadPool
shutdown_socket	httplib.h	/^inline int shutdown_socket(socket_t sock) {$/;"	f	namespace:httplib::detail
size	httplib.h	/^  size_t size() const {$/;"	f	class:httplib::detail::stream_line_reader
skip_content_with_length	httplib.h	/^inline void skip_content_with_length(Stream &strm, uint64_t len) {$/;"	f	namespace:httplib::detail
snprintf	httplib.h	77;"	d
sock_	httplib.h	/^  socket_t sock_;$/;"	m	class:httplib::detail::SSLSocketStream
sock_	httplib.h	/^  socket_t sock_;$/;"	m	class:httplib::detail::SocketStream
split	httplib.h	/^template <class Fn> void split(const char *b, const char *e, char d, Fn fn) {$/;"	f	namespace:httplib::detail
ssl	httplib.h	/^  const SSL *ssl;$/;"	m	struct:httplib::Request
ssl_	httplib.h	/^  SSL *ssl_;$/;"	m	class:httplib::detail::SSLSocketStream
sslinit_	httplib.h	/^static SSLInit sslinit_;$/;"	m	namespace:httplib::detail
state_	httplib.h	/^  size_t state_ = 0;$/;"	m	class:httplib::detail::MultipartFormDataParser
status	httplib.h	/^  int status = -1;$/;"	m	struct:httplib::Response
status_message	httplib.h	/^inline const char *status_message(int status) {$/;"	f	namespace:httplib::detail
stop	httplib.h	/^inline void Server::stop() {$/;"	f	class:httplib::Server
strcasecmp	httplib.h	106;"	d
stream_line_reader	httplib.h	/^  stream_line_reader(Stream &strm, char *fixed_buffer, size_t fixed_buffer_size)$/;"	f	class:httplib::detail::stream_line_reader
stream_line_reader	httplib.h	/^class stream_line_reader {$/;"	c	namespace:httplib::detail
strm	httplib.h	/^  z_stream strm;$/;"	m	class:httplib::detail::decompressor
strm_	httplib.h	/^  Stream &strm_;$/;"	m	class:httplib::detail::stream_line_reader
success	2020-3/_3-26.cpp	/^ListNode* success = nullptr;$/;"	v
sum	2020-2/_2-3.cpp	/^    static long long sum;$/;"	m	class:A	file:
sum	2020-2/_2-3.cpp	/^long long A::sum = 0;$/;"	m	class:A	file:
sum	2020-3/_3-5.cpp	/^int sum = 0;$/;"	v
sum4	2020-2/_2-3.cpp	/^int  sum4(int n)$/;"	f
superEggDrop	2020-3/_3-23.cpp	/^    int superEggDrop(int K, int N) {$/;"	f	class:Solution
svr_sock_	httplib.h	/^  std::atomic<socket_t> svr_sock_;$/;"	m	class:httplib::Server
tag	2020-3/_3-18.cpp	/^vector<vector<int>> tag = {{-1,0},{1,0},{0,1},{0,-1}};$/;"	v
tag	2020-3/_3-23.cpp	/^vector<vector<int>> tag;$/;"	v
target	httplib.h	/^  std::string target;$/;"	m	struct:httplib::Request
thread_init_	httplib.h	/^  SSLThreadLocks thread_init_;$/;"	m	class:httplib::detail::SSLInit
threads_	httplib.h	/^  std::vector<std::thread> threads_;$/;"	m	class:httplib::ThreadPool
timeout_sec_	httplib.h	/^  time_t timeout_sec_ = 300;$/;"	m	class:httplib::Client
to_lower	httplib.h	/^inline std::string to_lower(const char *beg, const char *end) {$/;"	f	namespace:httplib::detail
to_utf8	httplib.h	/^inline size_t to_utf8(int code, char *buff) {$/;"	f	namespace:httplib::detail
track	2020-3/_3-10.cpp	/^vector<int> track;$/;"	v
track	2020-3/_3-7.cpp	/^vector<int> track;$/;"	v
track	2020-3/_3-8.cpp	/^vector<int> track;$/;"	v
updateMatrix	2020-4/4-3.cpp	/^    vector<vector<int>> updateMatrix(vector<vector<int>>& matrix) $/;"	f	class:Solution
updateMatrix	2020-4/4-3.cpp	/^vector<vector<int> > updateMatrix(vector<vector<int> >& matrix)$/;"	f
val	2020-3/_3-2.cpp	/^  int val;$/;"	m	struct:TreeNode	file:
val	2020-3/_3-26.cpp	/^  int val;$/;"	m	class:ListNode	file:
val	2020-3/_3-5.cpp	/^  int val;$/;"	m	struct:TreeNode	file:
verify_host	httplib.h	/^inline bool SSLClient::verify_host(X509 *server_cert) const {$/;"	f	class:httplib::SSLClient
verify_host_with_common_name	httplib.h	/^inline bool SSLClient::verify_host_with_common_name(X509 *server_cert) const {$/;"	f	class:httplib::SSLClient
verify_host_with_subject_alt_name	httplib.h	/^SSLClient::verify_host_with_subject_alt_name(X509 *server_cert) const {$/;"	f	class:httplib::SSLClient
verify_result_	httplib.h	/^  long verify_result_ = 0;$/;"	m	class:httplib::SSLClient
version	httplib.h	/^  std::string version;$/;"	m	struct:httplib::Request
version	httplib.h	/^  std::string version;$/;"	m	struct:httplib::Response
wait_until_socket_is_ready	httplib.h	/^inline bool wait_until_socket_is_ready(socket_t sock, time_t sec, time_t usec) {$/;"	f	namespace:httplib::detail
worker	httplib.h	/^    explicit worker(ThreadPool &pool) : pool_(pool) {}$/;"	f	struct:httplib::ThreadPool::worker
worker	httplib.h	/^  struct worker {$/;"	s	class:httplib::ThreadPool
write	httplib.h	/^  std::function<void(const char *data, size_t data_len)> write;$/;"	m	class:httplib::DataSink
write	httplib.h	/^inline ssize_t BufferStream::write(const char *ptr, size_t size) {$/;"	f	class:httplib::detail::BufferStream
write	httplib.h	/^inline ssize_t SSLSocketStream::write(const char *ptr, size_t size) {$/;"	f	class:httplib::detail::SSLSocketStream
write	httplib.h	/^inline ssize_t SocketStream::write(const char *ptr, size_t size) {$/;"	f	class:httplib::detail::SocketStream
write	httplib.h	/^inline ssize_t Stream::write(const char *ptr) {$/;"	f	class:httplib::Stream
write	httplib.h	/^inline ssize_t Stream::write(const std::string &s) {$/;"	f	class:httplib::Stream
write_content	httplib.h	/^inline ssize_t write_content(Stream &strm, ContentProvider content_provider,$/;"	f	namespace:httplib::detail
write_content_chunked	httplib.h	/^inline ssize_t write_content_chunked(Stream &strm,$/;"	f	namespace:httplib::detail
write_content_with_provider	httplib.h	/^Server::write_content_with_provider(Stream &strm, const Request &req,$/;"	f	class:httplib::Server
write_format	httplib.h	/^inline ssize_t Stream::write_format(const char *fmt, const Args &... args) {$/;"	f	class:httplib::Stream
write_headers	httplib.h	/^inline ssize_t write_headers(Stream &strm, const T &info,$/;"	f	namespace:httplib::detail
write_multipart_ranges_data	httplib.h	/^inline bool write_multipart_ranges_data(Stream &strm, const Request &req,$/;"	f	namespace:httplib::detail
write_request	httplib.h	/^inline bool Client::write_request(Stream &strm, const Request &req,$/;"	f	class:httplib::Client
write_response	httplib.h	/^inline bool Server::write_response(Stream &strm, bool last_connection,$/;"	f	class:httplib::Server
wsinit_	httplib.h	/^static WSInit wsinit_;$/;"	m	namespace:httplib::detail
~CGarbo	2020-4/4-1.cpp	/^        ~CGarbo ()$/;"	f	class:Singleton::CGarbo
~Client	httplib.h	/^inline Client::~Client() {}$/;"	f	class:httplib::Client
~Response	httplib.h	/^  ~Response() {$/;"	f	struct:httplib::Response
~SSLClient	httplib.h	/^inline SSLClient::~SSLClient() {$/;"	f	class:httplib::SSLClient
~SSLInit	httplib.h	/^  ~SSLInit() {$/;"	f	class:httplib::detail::SSLInit
~SSLServer	httplib.h	/^inline SSLServer::~SSLServer() {$/;"	f	class:httplib::SSLServer
~SSLSocketStream	httplib.h	/^inline SSLSocketStream::~SSLSocketStream() {}$/;"	f	class:httplib::detail::SSLSocketStream
~SSLThreadLocks	httplib.h	/^  ~SSLThreadLocks() { CRYPTO_set_locking_callback(nullptr); }$/;"	f	class:httplib::detail::SSLThreadLocks
~Server	httplib.h	/^inline Server::~Server() {}$/;"	f	class:httplib::Server
~Singleton	2020-4/4-1.cpp	/^    ~Singleton()$/;"	f	class:Singleton	file:
~SocketStream	httplib.h	/^inline SocketStream::~SocketStream() {}$/;"	f	class:httplib::detail::SocketStream
~WSInit	httplib.h	/^  ~WSInit() { WSACleanup(); }$/;"	f	class:httplib::detail::WSInit
~decompressor	httplib.h	/^  ~decompressor() { inflateEnd(&strm); }$/;"	f	class:httplib::detail::decompressor
